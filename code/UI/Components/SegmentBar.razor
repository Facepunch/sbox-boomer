@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;
@using System;

@namespace Facepunch.Boomer.UI
@inherits Panel;
@attribute [StyleSheet( "/UI/Components/SegmentBar.scss" )]

<style>
    SegmentBar {
       .segment {
            &.active {
                background-image: linear-gradient( to top, darken( @Hex, 10% ), darken( @Hex, 10% ) );

                .inner {
                    background-image: linear-gradient( to top, @Hex, darken( @Hex, 10% ) );
                }
            }
       }

       &.slim {
           .segment {
               &.active {
                    background-image: linear-gradient( to top, @Hex, darken( @Hex, 30% ) );
               }
           }
       }
    }
</style>

@code {
    public int Segments { get; set; } = 5;

    public List<Panel> SegmentPanels { get; set; }
    protected Func<int> ActiveSegmentMethod { get; set; }

    public float CurrentValue { get; set; } = 60;
    public float MaxValue { get; set; } = 100;

    public Color Color { get; set; } = Color.Parse( "#E1D6D4" ) ?? Color.White;

    public string Hex => Color.Hex;

    protected override void OnAfterTreeRender( bool firstTime )
    {
        SegmentPanels = new();
        DeleteChildren( true );

        for ( int i = 0; i < Segments; i++ )
        {
            var segment = AddChild<Panel>( "segment" );
            var inner = segment.AddChild<Panel>( "inner" );
            SegmentPanels.Add( segment ); 
        }
    }

    protected int GetActiveSegments()
    {
        return (int)MathF.Round( ( CurrentValue / MaxValue ) * Segments );
    }

    public override void Tick()
    {
        var activeSegments = GetActiveSegments();

        for ( int i = 0; i < Segments; i++ )
        {
            var segment = SegmentPanels[i];
            segment.SetClass( "active", i < activeSegments );
        }
    }
}
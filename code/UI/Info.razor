@using Sandbox;
@using System;
@using Facepunch.Boomer.WeaponSystem;
@using Facepunch.Boomer.Mechanics;

@namespace Facepunch.Boomer

<style>
    Info {
        width: 100%;
        height: 100%;
        position: absolute;

        .left {
            position: absolute;
            bottom: 64px;
            left: 64px;
            flex-direction: column-reverse;
        }

        .right {
            position: absolute;
            bottom: 64px;
            right: 64px;
            justify-content: flex-end;
            flex-direction: column-reverse;
	        align-items: flex-end;
	        align-content: stretch;
        }

        .text {
            color: white;
            font-weight: 700;
            font-family: Quantico-Bold;
            font-size: 64px;
            justify-content: center;
            align-items: center;
            align-content: stretch;
        }

        .icon {
            color: white;
            font-size: 30px;
            font-family: Material Icons;
            justify-content: center;
            align-items: center;
            align-content: center;
        }

        .reserve {
            color: white;
            font-size: 24px;
        }

        .row {
            &.hidden {
                display: none;
            }
        }
    }
</style>

<root>
    @if ( DevCam != null )
        return;

    <div class="left">
        @if ( AmmoComponent != null )
        {
            <div class="row">
                <label class="text @AmmoClasses()">@AmmoComponent.AmmoCount.Clamp( 0, AmmoComponent.Data.MaximumAmmo )</label>

                @if ( AmmoComponent.AmmoCount > AmmoComponent.Data.MaximumAmmo )
                {
                    <label class="text">+ @(AmmoComponent.AmmoCount - AmmoComponent.Data.MaximumAmmo)</label>
                }

                <label class="text reserve">@AmmoComponent.Data.MaximumAmmo</label>
                <label class="icon">backpack</label>
            </div>
        }

        <div class="row">
            <label class="text @HealthClasses()">@Health</label>
            <label class="text reserve">100</label>
            <label class="icon">emergency</label>
        </div>

        <div class="row @ArmorClasses()">
            <label class="text">@Armor</label>
            <label class="text reserve">100</label>
            <label class="icon">shield</label>
        </div>

        @if ( Dash != null )
        {
            <div class="row">
                <label class="text">@Dash.DashCount</label>
                <label class="text reserve">@Dash.MaxDashes</label>
                <label class="icon">speed</label>
            </div>
        }
    </div>

    <div class="right">
        @if ( !string.IsNullOrEmpty( TimeLeftLabel ) )
        {
             <div class="row">
                <label class="text">@TimeLeftLabel</label>
                <label class="icon">timer</label>
            </div>   
        }
        @if ( !string.IsNullOrEmpty( GameStateLabel ) )
        {
             <div class="row">
                <label class="text reserve">@GameStateLabel</label>
            </div>   
        }
    </div>
</root>

@code 
{
    public string Health => $"{Player.Health:F0}";
    public string Armor => $"{Player.ArmorComponent.Current:F0}";
    public Player Player => Game.LocalPawn as Player;
    public Weapon Weapon => Player?.ActiveWeapon;
    public Ammo AmmoComponent => Weapon?.GetComponent<Ammo>();
    public DashMechanic Dash => Player.Controller?.GetMechanic<DashMechanic>();
    public DevCamera DevCam => Game.LocalClient.Components.Get<DevCamera>( false );

    // Gamemode
    public string TimeLeftLabel => GamemodeSystem.Current?.GetTimeLeftLabel();
    public string GameStateLabel => GamemodeSystem.Current?.GetGameStateLabel();

    protected override int BuildHash()
    {
        return HashCode.Combine( AmmoComponent?.AmmoCount, Player?.Health, Dash?.DashCount, Player.ArmorComponent.Current, DevCam, TimeLeftLabel, GameStateLabel );
    }

    protected string HealthClasses()
    {
        return Player.Health < 25f ? "low" : "";
    }

    protected string ArmorClasses()
    {
        return Player.ArmorComponent.Current < 1 ? "hidden" : "";
    }

    protected string AmmoClasses()
    {
        return ( (float)AmmoComponent.AmmoCount / (float)AmmoComponent.Data.MaximumAmmo ) < 0.25f ? "low" : "";
    }
}
@using Sandbox;
@using System;
@using Facepunch.Boomer.WeaponSystem;
@using Facepunch.Boomer.Mechanics;
@using Facepunch.Boomer.UI;

@namespace Facepunch.Boomer

<style>
    Info {
        width: 100%;
        height: 100%;
        position: absolute;

        .left {
            row-gap: 24px;
            position: absolute;
            bottom: 64px;
            left: 24px;
            flex-direction: column;
            //transform: skew(5deg, 0deg);
        }

        .right {
            position: absolute;
            bottom: 64px;
            right: 48px;
            justify-content: flex-end;
            flex-direction: column-reverse;
	        align-items: flex-end;
	        align-content: stretch;
        }

        .text {
            color: white;
            font-weight: 700;
            font-family: Quantico;
            font-size: 40px;
            height: 40px;
            justify-content: center;
            align-items: center;
            align-content: stretch;
            text-shadow: 0px 2px 3px rgba( black, 0.5 );

            &.big {
                font-size: 82px;
                height: 50px;
                margin-right: 8px;
            }

            &.thin {
                font-weight: 300;
            }
        }

        .stat {
            margin-left: 55px;
        }

        .divider {
            width: 3px;
            height: 40px;
            margin-left: 15px;
            margin-right: 15px;
            background-image: linear-gradient( to top, #D9D9D9 0%, #D9D9D9 50%, rgba(217, 217, 217, 0) 100%);
        }

        .icon {
            color: linear-gradient( 180deg, white, #E2D5D3 );

            font-size: 30px;
            font-family: Material Icons;
            justify-content: center;
            align-items: center;
            align-content: center;

            &.big {
                font-size: 32px;
                padding-right: 12px;
            }
        }

        .weapon-icon {
            width: 108px;
            aspect-ratio:1;	
        }

        .inset {
            margin-left: 32px;
        }

        .reserve {
            color: linear-gradient(180deg, rgba(225, 214, 212, 1) 0%, rgba(226, 213, 211, 1) 100%);
            font-family: Quantico;
            font-weight: 400;
            font-size: 20px;
        }

        .row {
            margin-bottom: 8px;

            &.hidden {
                display: none;
            }

        	justify-content: flex-start;
	        align-items: center;
	        align-content: stretch;
            flex-direction: row;
        }

        .fire-modes
        {
            InputHint
            {
                &:not( :first-child )
                {
                    border-left: 2px solid white;
                }
            }
        }

        .column {
            flex-direction: column;
        }

        .ammo {
            .reserve {
                text-align: right;
                height: 20px;
                justify-content: flex-end;
            }
        }
    }
</style>

<root>
    @if ( DevCam != null )
        return;

    <div class="left">
        <div class="column">
            <div class="row stat">
                <label class="text @HealthClasses()">@Health</label>
                <div class="divider" />
                <label class="text reserve">100</label>
            </div>

            <div class="row">
                <label class="icon big">emergency</label>
                <SegmentBar CurrentValue=@Player.Health MaxValue=@(100) Segments=@(10) />
            </div>
        </div>

        <div class="column inset">
            <div class="row stat">
                <label class="text">@Armor</label>
                <div class="divider" />
                <label class="text reserve">100</label>
            </div>

            <div class="row">
                <label class="icon big">shield</label>
                <SegmentBar Color=@ArmorColor CurrentValue=@Armor MaxValue=@(100) Segments=@(10) />
            </div>
        </div>
    </div>

    <div class="right">
        @if ( Dash != null )
        {
            <div class="column">
                <div class="row">
                    <label class="icon big">speed</label>
                    <SegmentBar class="slim" Color=@DashColor CurrentValue=@Dash.DashCount MaxValue=@Dash.MaxDashes Segments=@Dash.MaxDashes />
                    <InputHint Button="Run" style="margin-left: 12px; width: 64px; height:32px;" />
                </div>
            </div>
        }

        @if ( AmmoComponent != null )
        {
            <div class="row stat">
                <div class="column ammo">
                    <label class="text big @AmmoClasses()">@AmmoComponent.AmmoCount.Clamp( 0, AmmoComponent.MaximumAmmo )</label>
                </div>

                <img class="weapon-icon" src=@Weapon.AmmoIcon />

                <div class="fire-modes">
                    @foreach( var comp in Weapon.Components.GetAll<ShootComponent>() )
                    {
                        <InputHint Button=@comp.FireButton style="width: 32px; height:32px;" />
                    }
                </div>
            </div>
        }

        <WeaponList />
    </div>
</root>

@code 
{
    public static Color DashColor = Color.Parse( "#C57415" ) ?? Color.White;
    public static Color ArmorColor = Color.Parse( "#F2EA2B" ) ?? Color.White;

    public string Health => $"{Player.Health:F0}";
    public float Armor => Player.ArmorComponent.Current.CeilToInt();
    public string ArmorString => $"{Player.ArmorComponent.Current:F0}";
    public Player Player => Game.LocalPawn as Player;
    public Weapon Weapon => Player?.ActiveWeapon;
    public AmmoComponent AmmoComponent => Weapon?.GetComponent<AmmoComponent>( true );
    public DashMechanic Dash => Player.Controller?.GetMechanic<DashMechanic>();
    public DevCamera DevCam => Game.LocalClient.Components.Get<DevCamera>( false );
    public string WeaponColor => Weapon.WeaponColor.ToString();

    protected override int BuildHash()
    {
        return HashCode.Combine( AmmoComponent?.AmmoCount, Weapon, Player?.Health, Dash?.DashCount, Player.ArmorComponent.Current, DevCam );
    }

    protected string HealthClasses()
    {
        return Player.Health < 25f ? "low" : "";
    }

    protected string AmmoClasses()
    {
        return ( (float)AmmoComponent.AmmoCount / (float)AmmoComponent.MaximumAmmo ) < 0.25f ? "low" : "";
    }
}
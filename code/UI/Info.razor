@using Sandbox;
@using System;
@using Facepunch.Boomer.WeaponSystem;

@namespace Facepunch.Boomer

<style>
    Info {
        position: absolute;
        bottom: 64px;
        left: 64px;
        flex-direction: column-reverse;
       	
        .text {
            color: white;
            font-weight: 700;
            font-family: Quantico-Bold;
            font-size: 64px;
            justify-content: center;
            align-items: center;
            align-content: stretch;
        }

        .icon {
            color: white;
            font-size: 20px;
            font-family: Material Icons;
            justify-content: center;
            align-items: center;
            align-content: center;
        }

        .reserve {
            color: white;
            font-size: 24px;
        }

        .row {
            margin-top: 12px;
            justify-content: flex-end;
        }
    }
</style>

<root>
    @if ( AmmoComponent != null )
    {
        <div class="row">
            <label class="text @AmmoClasses()">@AmmoComponent.AmmoCount.Clamp( 0, AmmoComponent.Data.MaximumAmmo )</label>

            @if ( AmmoComponent.AmmoCount > AmmoComponent.Data.MaximumAmmo )
            {
                <label class="text">+ @(AmmoComponent.AmmoCount - AmmoComponent.Data.MaximumAmmo)</label>
            }

            <label class="text reserve">@AmmoComponent.Data.MaximumAmmo</label>
        </div>
    }

    <div class="row">
        <label class="text @HealthClasses()">@Health</label>
        <label class="text reserve">100</label>
    </div>
</root>

@code 
{
    public string Health => $"{Player.Health:F0}";
    public Player Player => Game.LocalPawn as Player;
    public Weapon Weapon => Player?.ActiveWeapon;
    public Ammo AmmoComponent => Weapon?.GetComponent<Ammo>();

    protected override int BuildHash()
    {
        return HashCode.Combine( AmmoComponent?.AmmoCount, Player?.Health );
    }

    protected string HealthClasses()
    {
        return Player.Health < 25f ? "low" : "";
    }

    protected string AmmoClasses()
    {
        return ( (float)AmmoComponent.AmmoCount / (float)AmmoComponent.Data.MaximumAmmo ) < 0.25f ? "low" : "";
    }
}
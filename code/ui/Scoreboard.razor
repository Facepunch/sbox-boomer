
@using Boomer;
@using Sandbox.UI;

@namespace Boomer.UI
@attribute [StyleSheet("ui/Scoreboard.scss")]
@inherits Panel;

<root class="scoreboard">
	<button onclick=@OpenSettings class="button" style="margin-bottom: 20px;">#Scoreboard.Settings</button>

	<panel class="header" @ref=Header>
		<label class="name">#Scoreboard.Player</label>
		<label class="kills">#Scoreboard.Kills</label>
		<label class="deaths">#Scoreboard.Deaths</label>
		<label class="ping">#Scoreboard.Ping</label>
	</panel>

	<panel class="canvas" @ref=Canvas></panel>

	<button onclick=@ToggleSpectator class="button" style="margin-bottom: 20px;">#Scoreboard.ToggleSpectator</button>
</root>

@code
{
	bool Cursor;
	RealTimeSince timeSinceSorted;
	Dictionary<IClient, ScoreboardEntry> Rows = new();

	public Panel Canvas;
	public Panel Header;

	public override void Tick()
	{
		SetClass( "open", ShouldBeOpen() );

		if ( !IsVisible )
			return;

		//
		// Clients that were added
		//
		foreach ( var client in Game.Clients.Except( Rows.Keys ) )
		{
			var entry = AddClient( client );
			Rows[client] = entry;
		}

		foreach ( var client in Rows.Keys.Except( Game.Clients ) )
		{
			if ( Rows.TryGetValue( client, out var row ) )
			{
				row?.Delete();
				Rows.Remove( client );
			}
		}

		Style.PointerEvents = Cursor ? PointerEvents.All : PointerEvents.None;

		if ( !HasClass( "open" ) ) Cursor = false;
		if ( !IsVisible ) return;

		if ( Input.Down( InputButton.PrimaryAttack ) || Input.Down( InputButton.SecondaryAttack ) )
		{
			Cursor = true;
		}

		if ( timeSinceSorted > 0.1f )
		{
			timeSinceSorted = 0;

			if ( TeamManager.Current.IsValid() && TeamManager.Current.IsTeamPlayEnabled )
			{
				Canvas.SortChildren<ScoreboardEntry>( x =>
				{
					var team = x.Client.GetTeam();
					if ( team == null ) return 0;

					x.Style.BackgroundColor = team.Color.WithAlpha( 0.1f );

					return -x.Client.GetTeam().Index * 1000;
				} );
			}
			else
			{
				//
				// Sort by number of kills, then number of deaths
				//
				Canvas.SortChildren<ScoreboardEntry>( ( x ) => (-x.Client.GetInt( "kills" ) * 1000) + x.Client.GetInt( "deaths" ) );
			}
		}
	}

	protected override int BuildHash()
	{
		if (timeSinceSorted < 0.1f) return 0;

		return HashCode.Combine( Time.Now );
	}

	private bool ShouldBeOpen()
	{
		if ( DeathmatchGame.CurrentState == DeathmatchGame.GameStates.GameEnd )
			return true;

		if ( Input.Down( InputButton.Score ) )
			return true;

		return false;
	}

	private ScoreboardEntry AddClient( IClient entry )
	{
		var p = Canvas.AddChild<ScoreboardEntry>();
		p.Client = entry;
		return p;
	}

	public void OpenSettings()
	{
		SettingsMenu.SetOpen( true );
	}

	public void ToggleSpectator()
	{
		DeathmatchGame.ToggleSpectator();
	}
}
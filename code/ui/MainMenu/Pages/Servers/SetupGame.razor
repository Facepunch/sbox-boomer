@using Sandbox;
@using System;
@using System.Linq;
@using System.Threading.Tasks;
@using Sandbox.Menu;
@using Sandbox.UI;

<root>
    <HeaderComponent>
        <SecondaryHeader>
            <nav href="/play/matchmaking">
                <span>Match Making</span>
                <div class="diamond"></div>
            </nav>
            <nav href="/play/server-browser">
                <span>Server Browser</span>
                <div class="diamond"></div>
            </nav>
            <nav href="/play/create">
                <span>Create</span>
                <div class="diamond"></div>
            </nav>
        </SecondaryHeader>
        <TertiaryHeader>
            <span class="title">Create</span>
            <div class="diamond"></div>
            <span class="subtitle">Host your own custom Public or Private Boomer server.</span>
        </TertiaryHeader>
    </HeaderComponent>

     <BodyContainer>
        <Body>

            <div class="columns space-between">
                <div class="column is-6">
                    <div class="form-container">

                        <div class="form-row">
                            <label class="form-label">Server Name</label>
                            <div class="form-control">
                                <div class="form-input text-left">
                                    <label>Server Name</label>
                                </div>
                            </div>
                        </div>
                    
                        <div class="form-row">
                            <label class="form-label">Max Players</label>
                            <div class="form-control">
                                <a href="#" class="btn is-icon form-button">
                                    <label class="icon">chevron_left</label>
                                </a>
                                <div class="form-input">
                                    <label>16</label>
                                </div>
                                <a href="#" class="btn is-icon form-button">
                                    <label class="icon">chevron_right</label>
                                </a>
                            </div>
                        </div>

                        <div class="form-row">
                            <label class="form-label">Map</label>
                            <div class="form-control">
                                <div class="form-input text-left">
                                    <label>De_Dusty2</label>
                                </div>
                                <a href="#" class="btn form-button is-icon is-selected">
                                    <label class="icon">map</label>
                                </a>
                            </div>
                        </div>

                        <div class="form-row">
                            <label class="form-label">Private</label>
                            <div class="form-control">
                                <a href="#" class="btn form-button fill is-selected">
                                    <label class="text">Off</label>
                                </a>
                                <a href="#" class="btn form-button fill">
                                    <label class="text">On</label>
                                </a>
                            </div>
                        </div>

                        <div class="form-row disabled">
                            <label class="form-label">Password</label>
                            <div class="form-control">
                                <div class="form-input text-left">
                                    <label>Enter a password...</label>
                                </div>
                            </div>
                        </div>


                    </div>
                </div>
                <div class="column is-4">
                    <div class="button-container">
                        <a href="/" class="btn is-primary has-icon fill">
                            <label class="icon">close</label>
                            <label class="text">Cancel</label>
                        </a>
                        <a class="btn is-secondary has-icon fill" onclick=@Play>
                            <label class="icon">check</label>
                            <label class="text">Start</label>
                        </a>
                    </div>
                </div>
            </div>

            @* @if ( ChoosingMap )
            {
                <MapSelect OnPackageSelected=@OnMapSelected />

                return;
            }

            <div class="controls">
                <div class="span">
                    @if ( MaxPlayersSupported > 1 )
                    {
                        <FormGroup class="form-group">
                            <Label>Maximum Players</Label>
                            <Control>
                                <SliderControl ShowRange=@true Min=@(1f) Max=@MaxPlayersSupported Value:bind=@Game.Menu.Lobby.MaxMembers />
                            </Control>
                        </FormGroup>
                    }

                    <FormGroup class="form-group">
                        <Label>Map</Label>
                        <Control>
                            <PackageCard OnLaunch=@OnMapClicked Package=@MapPackage />
                        </Control>
                    </FormGroup>
                </div>

                <div class="spacer" />

                <a class="button" onclick=@Play>Start</a>
                <a class="button" href="/">Return</a>
            </div> *@
        </Body>
    </BodyContainer>

</root>

@code
{
    int MaxPlayersSupported { get; set; } = 1;
    int MaxPlayers { get; set; } = 1;
    Package MapPackage { get; set; }

    bool ChoosingMap;
    void OnMapClicked()
    {
        ChoosingMap = true;
        StateHasChanged();
    }

    void OnMapSelected( Package map )
    {
        ChoosingMap = false;
        MapPackage = map;
        StateHasChanged();
    }


    protected override async Task OnParametersSetAsync()
    {
        MaxPlayersSupported = Game.Menu.Package.GetMeta<int>( "MaxPlayers", 1 );
        MaxPlayers = MaxPlayersSupported;

        MapPackage = await Package.FetchAsync( "facepunch.square", false );
        StateHasChanged();
    }

    async Task Play()
    {
        await Game.Menu.StartServerAsync( MaxPlayers, $"My game", MapPackage.FullIdent );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( MaxPlayers, MapPackage );
    }
}
@using System.Threading.Tasks
@inherits MainMenuPage
@namespace Facepunch.Boomer.MainMenu
@attribute [StyleSheet]

<root>
    <div class="header">
        <section>
            <i>heart</i>
        </section>
        <section>
            Name
        </section>
        <section>
            Map
        </section>
        <section>
            Players
        </section>
        <section>
            Ping
        </section>
    </div>
    
    <div class="main">
        @if ( IsDebug )
        {
            <ServerListRow Title="[EU] Boom-punch 1" MapIdent="facepunch.dockyard"/>
            <ServerListRow Title="[EU] Boom-punch 2" MapIdent="facepunch.dockyard"/>
        }
        else
        {
            @if ( List == null || ( List.IsQuerying && !List.Any() ) )
            {
                <label>Loading...</label>
            }
            else if ( !List.Any() )
            {
                <label>No servers available...</label>
            }
            else
            {
                @foreach ( var server in List )
                {
                    <ServerListRow 
                        Title=@server.Name 
                        Players=@server.Players
                        MaxPlayers=@server.MaxPlayers 
                        Ping=@server.Ping
                    />
                }
            }
        }
    </div>
</root>

@code
{
    bool IsDebug => true;
    
    Sandbox.Services.ServerList List;
    
    protected override void OnParametersSet()
    {
        var game = "facepunch.boomer";
        
        Log.Info($"Filtering By Game '{game}'");

        List?.Dispose();
        List = new Sandbox.Services.ServerList();

        if ( !string.IsNullOrWhiteSpace( game ) )
        {
            List.AddFilter("gametagsand", $"game:{game}");
        }

        _ = Refresh();
    }
    
    async Task Refresh()
    {
        if ( List.IsQuerying )
            return;

         List.Query();

        while ( List.IsQuerying )
        {
            await Task.Delay( 100 );
            StateHasChanged();
        }

        StateHasChanged();
    }
}
@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;
@using System;
@using System.Linq;

@namespace Facepunch.Boomer.UI
@inherits Panel

<root class="@Classes()">
    @if ( Team != Team.None )
    {
        <div class="header">
            <label class="team-name" @ref=TeamNameLabel text=@TeamName />
            <div class="grow" />
            <div class="score">
                <div class="span">
                    <label class="team-score" text=@TeamScore />
                    <label class="team-score"> points</label>
                </div>

                <div class="bar">
                    <div class="bar-inner" style="width: @ScorePercent%"/>
                </div>
            </div>
        </div>
    }

    @if ( Rows.Count > 0 )
    {
        <div class="names">
            <label class="name">Name</label>
            <label class="kills">Kills</label>
            <label class="deaths">Deaths</label>
            <label class="score">Score</label>
            <label class="ping">Ping</label>
        </div>
    }

    <div class="canvas" @ref=Canvas>
        @if ( Rows.Count < 1 )
        {
            <label class="placeholder">Waiting for players</label>
        }
    </div>
</root>

@code
{
    // Panel that all Rows will be placed in
    public Panel Canvas;
    public Team Team = Team.None;

    public Label TeamNameLabel;

    public string TeamName => Team.GetName();
    public int TeamScore => 0;
    public float ScorePercent => 0;

    public Dictionary<IClient, ScoreboardRow> Rows = new();

    TimeSince TimeSinceUpdate = 0;

    public void Update()
    {
        if ( Canvas == null ) return;

        TimeSinceUpdate = 0;

        TeamNameLabel.Style.FontColor = Team.GetColor();

        Canvas.SortChildren<ScoreboardRow>( x => -x.Client.GetInt( "score" ) * 1000 );

        foreach ( var client in Game.Clients.Except( Rows.Keys ).Where( x => TeamSystem.GetTeam( x ) == Team ) )
        {
            var entry = AddClient( client );
            if ( entry == null ) continue;

            Rows[client] = entry;
        }

        foreach ( var client in Rows.Keys.Except( Game.Clients ) )
        {
            if ( Rows.TryGetValue( client, out var row ) )
            {
                row?.Delete();
                Rows.Remove( client );
            }
        }
    }

    public override void Tick()
    {
        base.Tick();

        if ( TimeSinceUpdate > 0.25f )
        {
            Update();
        }
    }

    ScoreboardRow AddClient( IClient cl )
    {
        var teamIndex = cl.Components.Get<TeamComponent>()?.Team ?? Team.None;

        var p = Canvas.AddChild<ScoreboardRow>();
        p.SetClient( cl );

        return p;
    }

    protected string Classes()
    {
        var friendly = TeamSystem.IsFriendly( Team, TeamSystem.GetTeam( Game.LocalClient ) );
        if (friendly) return "friend";
        return "enemy";
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( Rows.Count, TeamScore );
    }
}
